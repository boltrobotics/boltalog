.output "logger.cpp"
.template 1
.ignorecase = 0
\
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.  */

// SYSTEM INCLUDES
#include <cinttypes>

// PROJECT INCLUDES
#include "logger.hpp" // class implemented

namespace slog {

static std::unique_ptr<Logger> logger_;

///////////////////////////////////// PUBLIC ///////////////////////////////////

//=================================== LIFECYCLE ================================

Logger::Logger(
        const std::string& ident,
        int facility,
        int level) :
    ident_(ident),
    levels_() {

    levels_[0] = level;
.for log.event
    levels_[$(event.id)] = $(event.level);
.endfor

    openlog(ident_.c_str(), LOG_PID | LOG_NDELAY, facility);
}

Logger::~Logger() {
}

//=================================== OPERATIONS ===============================

// static
Logger* Logger::make(
    const std::string& ident, int facility, int level) {

    if (!logger_) {
        logger_.reset(new Logger(ident, facility, level));
    }

    return instance();
}

// static
Logger* Logger::instance() {
    return logger_.get();
}

void Logger::level(int level) {
    levels_[0] = level;
    setlogmask(LOG_UPTO(level));
}

bool Logger::filter(int eventId) const {
    if (levels_[eventId] <= levels_[0]) {
        return true;
    } else {
        return false;
    }
}

.for log.event
void Logger::$(event.name)Impl(
.for event.param
.   if last()
    $(param.type) $(param.name)) const {
.   else
    $(param.type) $(param.name),
.   endif
.endfor

    syslog(levels_[$(event.id)], "$(event.id)\
.for event.param
,%\
.   if param.type = "uint8_t"
" PRIu8 "\
.   elsif param.type = "int8_t"
" PRId8 "\
.   elsif param.type = "uint16_t"
" PRIu16 "\
.   elsif param.type = "int16_t"
" PRId16 "\
.   elsif param.type = "uint32_t"
" PRIu32 "\
.   elsif param.type = "int32_t"
" PRId32 "\
.   elsif param.type = "uint64_t"
" PRIu64 "\
.   elsif param.type = "int64_t"
" PRId64 "\
.   elsif param.type = "const std::string&"
s\
.   endif
.endfor
",
.for event.param
.   if index(param) > 1
, \
.   else
        \
.   endif
.   if param.type = "const std::string&"
$(param.name).c_str()\
.   else
$(param.name)\
.   endif
.endfor
);
}

.endfor
\
} // namespace slog
.endtemplate
