.output "logger.hpp"
.template 1
.ignorecase = 0
\
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.  */

#ifndef _slog_Logger_hpp_
#define _slog_Logger_hpp_

// SYSTEM INCLUDES
#include <cstdint>
#include <array>
#include <memory>
#include <syslog.h>

namespace slog {

$("/" * 80)

.for log.event
.   if defined(event->doc)
/**
 * $(event->doc)
 *
. else
/**
.   endif
.for event.param
 * @param $(param.name) $(param.doc?)
.endfor
 */
\
#define $(event.name)(\
.for event.param
.   if index(param) > 1
, \
.   endif
$(param.name)\
.endfor
) \\
    if (Logger::instance()->filter($(event.id))) { \\
        Logger::instance()->$(event.name)Impl(\
.       for event.param
.           if index(param) > 1
, \
.           endif
$(param.name)\
.       endfor
); \\
    }

.endfor
\
$("/" * 80)

/**
 * Logging interface for reporting runtime events and metrics.
 *
 * The events are to be logged through the macros defined above.
 */
class Logger
{
public:

// LIFECYCLE

    /**
     * Ctor.
     *
     * @param ident - the program name
     * @param facility - the syslog facility
     * @param level - the minimum log level to allow through
     */
    Logger(
        const std::string& ident = "",
        int facility = LOG_USER,
        int level = LOG_DEBUG);

    /**
     * Dtor.
     */
    ~Logger();

// OPERATIONS

    /**
     * Factory function to create global logger instance. Call only once at
     * start-up.
     *
     * @param ident - the program name
     * @param facility - the syslog facility
     * @param level - the minimum log level to allow through
     * @return global logger instance
     */
    static Logger* make(
        const std::string& ident = "",
        int facility = LOG_USER,
        int level = LOG_DEBUG);

    /**
     * @return global logger instance
     */
    static Logger* instance();

    /**
     * Set log level.
     *
     * @param level - the level
     */
    void level(int level);

    /**
     * @param eventId - the event ID
     * @return true if event is allowed to pass through, false otherwise
     */
    bool filter(int eventId) const;

    //$("-" * 74)

.for log.event
    void $(event.name)Impl(
.    for event.param
.       if last()
        $(param.type) $(param.name)) const;

.       else
        $(param.type) $(param.name),
.       endif
.    endfor
.endfor
    //$("-" * 74)

private:

// ATTRIBUTES

    std::string ident_;
    std::array<int, $(count(log.event) + 1)> levels_;
};

} // namespace slog

#endif // _slog_Logger_hpp_
.endtemplate
