// Copyright (C) 2019 Bolt Robotics <info@boltrobotics.com>
// License: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

////////////////////////////////////////////////////////////////////////////////////////////////////
// WARNING: The code is auto-generated. Any changes will be overwritten.
////////////////////////////////////////////////////////////////////////////////////////////////////

// SYSTEM INCLUDES

// PROJECT INCLUDES
#include "logger.hpp" // class implemented

<TMPL_foreach namespace as n->
namespace <TMPL_var n>
{

</TMPL_foreach->

btr::SharedPtr<Logger> Logger::logger_;

uint32_t toHex(const char* data, uint32_t size, char* dst_str, uint32_t dst_size)
{
  if (size == 0 || dst_size < (size * 3)) {
    return -1;
  }

  static const char lut[] = "0123456789ABCDEF";
  uint32_t j = 0;

  for (uint32_t i = 0; i < size; i++, j += 3) {
    const uint8_t c = data[i];
    dst_str[j] = lut[c >> 4];
    dst_str[j + 1] = lut[c & 15];
    dst_str[j + 2] = ':';
  }

  if (j >= 3) {
    dst_str[(j - 3) + 2] = '\0';
  }
  return j;
}

/////////////////////////////////////////////// PUBLIC /////////////////////////////////////////////

//============================================= LIFECYCLE ==========================================

Logger::Logger(btr::SharedPtr<btr::log::LoggerImpl> logger_impl, int log_level)
  :
  logger_impl_(logger_impl)
{
  levels_[0] = log_level;

  <TMPL_foreach events as e->
  levels_[<TMPL_var e.id>] = btr::log::<TMPL_var e.level>;
  </TMPL_foreach>
}

//============================================= OPERATIONS =========================================

// static
btr::SharedPtr<Logger> Logger::init(int log_level)
{
  if (nullptr == logger_.get()) {
    btr::SharedPtr<btr::log::LoggerImpl> impl(new btr::log::LoggerImpl());
    btr::SharedPtr<Logger> logger(new Logger(impl, log_level));
    Logger::instance(logger);
  }
  return Logger::instance();
}

// static
bool Logger::isInstance()
{
  return (nullptr != logger_.get());
}

// static
btr::SharedPtr<Logger> Logger::instance()
{
  return logger_;
}

// static
btr::SharedPtr<Logger> Logger::instance(btr::SharedPtr<Logger> logger)
{
  btr::SharedPtr<Logger> prev_logger = logger_;
  logger_ = logger;
  return prev_logger;
}

btr::SharedPtr<btr::log::LoggerImpl> Logger::impl()
{
  return logger_impl_;
}

btr::SharedPtr<btr::log::LoggerImpl> Logger::impl(btr::SharedPtr<btr::log::LoggerImpl> impl)
{
  btr::SharedPtr<btr::log::LoggerImpl> prev_logger_impl = logger_impl_;
  logger_impl_ = impl;
  return prev_logger_impl;
}

const char* Logger::strerror(int errnum)
{
  return btr::log::LoggerImpl::strerror(errnum);
}

int Logger::level(int event_id, int log_level)
{
  int prev_event_id = -1;

  if (event_id < (int)(sizeof(levels_) / sizeof(int))) {
    prev_event_id = levels_[event_id];
    levels_[event_id] = log_level;
  }
  return prev_event_id;
}

bool Logger::filter(int event_id) const
{
  if (event_id < (int)(sizeof(levels_) / sizeof(int)) && levels_[event_id] >= levels_[0]) {
    return true;
  } else {
    return false;
  }
}

<TMPL_foreach events as e->

<TMPL_var COUNT(1)->
int Logger::<TMPL_var e.name>Impl(
  <-TMPL_if DEFINED(params)->

  <TMPL_foreach params as p->
  <TMPL_if !(p.__first__)->,
  <TMPL_var PARAMMAPPER(p.type, p.name)->
  <TMPL_else>
  <TMPL_var PARAMMAPPER(p.type, p.name)->
  </TMPL_if->
  </TMPL_foreach->)

  <-TMPL_else->)
  <-/TMPL_if>
{
  char buff[MAX_LOG_SIZE];
  <TMPL_if DEFINED(params)->
  <TMPL_foreach params as p->
  <-TMPL_var TOHEX(p.type, p.name)>
  <-/TMPL_foreach->
  </TMPL_if>
  int cx = snprintf(buff, MAX_LOG_SIZE, "<TMPL_var e.id>"
    <TMPL_if DEFINED(params)->

    <TMPL_foreach params as p->
    ",%" <TMPL_var FORMATSPEC(p.type)> ""
    <-/TMPL_foreach->
    ,
    <TMPL_foreach params as p->
    <TMPL_if !p.__first__>,</TMPL_if><TMPL_var FORMATPARAMS(p.type, p.name)>
    <-/TMPL_foreach>

    <-/TMPL_if>);

  return log(cx, levels_[<TMPL_var e.id>], buff);
}

</TMPL_foreach->

/////////////////////////////////////////////// PRIVATE ////////////////////////////////////////////

//============================================= OPERATIONS =========================================

int Logger::log(int cx, int level, const char* msg)
{
  int rc = -1;

  if (cx >= 0) {
    logger_impl_->log(level, msg);

    if (cx < MAX_LOG_SIZE) {
      rc = 0;
    } else {
      errno = EOVERFLOW;
    }
  }
  return rc;
}
<TMPL_foreach namespace as n>
} // namespace <TMPL_var n>
</TMPL_foreach>
