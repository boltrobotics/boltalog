<TMPL_verbose>
<TMPL_comment>/* Copyright (C) 2018 Bolt Robotics <info@boltrobotics.com> */</TMPL_comment>
<TMPL_include "license.tmpl">
</TMPL_verbose>
////////////////////////////////////////////////////////////////////////////////////////////////////
// WARNING: The code is auto-generated. Any changes will be overwritten.
////////////////////////////////////////////////////////////////////////////////////////////////////

// SYSTEM INCLUDES

// PROJECT INCLUDES
#include "logger.hpp" // class implemented
#include "boltalog/logger_impl.hpp"

<TMPL_foreach namespace as n->
namespace <TMPL_var n>
{

</TMPL_foreach->

Logger* Logger::logger_ = nullptr;

/////////////////////////////////////////////// PUBLIC /////////////////////////////////////////////

//============================================= LIFECYCLE ==========================================

Logger::Logger(btr::log::LoggerImpl* logger_impl, int log_level) :
  logger_impl_(logger_impl)
{
  levels_[0] = log_level;

  <TMPL_foreach events as e->
  levels_[<TMPL_var e.id>] = btr::log::<TMPL_var e.level>;
  </TMPL_foreach>
}

//============================================= OPERATIONS =========================================

// static
Logger* Logger::instance()
{
  return logger_;
}

// static
Logger* Logger::instance(Logger* logger)
{
  Logger* prev_logger = logger_;
  logger_ = logger;
  return prev_logger;
}

btr::log::LoggerImpl* Logger::impl()
{
  return logger_impl_;
}

btr::log::LoggerImpl* Logger::impl(btr::log::LoggerImpl* impl)
{
  btr::log::LoggerImpl* prev_logger_impl = logger_impl_;
  logger_impl_ = impl;
  return prev_logger_impl;
}

const char* Logger::strerror(int errnum)
{
  return btr::log::LoggerImpl::strerror(errnum);
}

int Logger::level(int event_id, int log_level)
{
  int prev_event_id = -1;

  if (event_id < (int)(sizeof(levels_) / sizeof(int))) {
    prev_event_id = levels_[event_id];
    levels_[event_id] = log_level;
  }
  return prev_event_id;
}

bool Logger::filter(int event_id) const
{
  if (event_id < (int)(sizeof(levels_) / sizeof(int)) && levels_[event_id] >= levels_[0]) {
    return true;
  } else {
    return false;
  }
}

<TMPL_foreach events as e->

<TMPL_var COUNT(1)->
int Logger::<TMPL_var e.name>Impl(
  <-TMPL_if DEFINED(params)->

  <TMPL_foreach params as p->
  <TMPL_if p.__last__>
  <TMPL_var TYPEMAPPER(p.type)> <TMPL_var p.name>)
  <TMPL_else>
  <TMPL_var TYPEMAPPER(p.type)> <TMPL_var p.name>,
  <-/TMPL_if->
  </TMPL_foreach->

  <-TMPL_else->)
  <-/TMPL_if>
{
  char buff[MAX_LOG_SIZE];
  int cx = snprintf(buff, MAX_LOG_SIZE, "<TMPL_var e.id>"
    <TMPL_if DEFINED(params)->

    <TMPL_foreach params as p->
    ",%" <TMPL_var FORMATSPEC(p.type)> ""
    <-/TMPL_foreach->
    ,
    <TMPL_foreach params as p->
    <TMPL_if !p.__first__>,</TMPL_if><TMPL_var p.name>
    <-/TMPL_foreach>

    <-/TMPL_if>);

  return log(cx, levels_[<TMPL_var e.id>], buff);
}

</TMPL_foreach->

/////////////////////////////////////////////// PRIVATE ////////////////////////////////////////////

//============================================= OPERATIONS =========================================

int Logger::log(int cx, int level, const char* msg)
{
  int rc = -1;

  if (cx >= 0) {
    logger_impl_->log(level, msg);

    if (cx < MAX_LOG_SIZE) {
      rc = 0;
    } else {
      errno = EOVERFLOW;
    }
  }
  return rc;
}
<TMPL_foreach namespace as n>
} // namespace <TMPL_var n>
</TMPL_foreach>
