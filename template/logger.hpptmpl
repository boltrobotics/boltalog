<TMPL_verbose>
<TMPL_comment>
// Copyright (C) 2018 Bolt Robotics <info@boltrobotics.com>
// License: GNU GPL v3
</TMPL_comment>
<TMPL_include "license.tmpl">
</TMPL_verbose>
////////////////////////////////////////////////////////////////////////////////////////////////////
// WARNING: The code is auto-generated. Any changes will be overwritten.
////////////////////////////////////////////////////////////////////////////////////////////////////

<-TMPL_verbose>
<TMPL_block "guard" args(ns)>
<TMPL_foreach ns as n>
<TMPL_var n>_
</TMPL_foreach>
</TMPL_block>
</TMPL_verbose>

<-TMPL_verbose>
<TMPL_block "scope" args(ns)>
<TMPL_foreach ns as n>
<TMPL_var n>::
</TMPL_foreach>
</TMPL_block>
</TMPL_verbose>

#ifndef _<TMPL_call "guard" args(namespace)>Logger_hpp_
#define _<TMPL_call "guard" args(namespace)>Logger_hpp_

// SYSTEM INCLUDES
#include <cinttypes>

// SYSTEM INCLUDES
#include "utility/shared_ptr.hpp"
#include "boltalog/logger_impl.hpp"

<TMPL_foreach namespace as n>
namespace <TMPL_var n>
{
</TMPL_foreach->
<-TMPL_foreach events as e->
<-TMPL_if DEFINED(e.desc)>

/**
 * <TMPL_var e.desc>
 *
<-TMPL_else>
/**
<-/TMPL_if>
<-TMPL_foreach params as p>
 * @param <TMPL_var p.name> <TMPL_var p.desc>
<-/TMPL_foreach>
 */
#define <TMPL_var e.name>(
  <-TMPL_foreach params as p->
  <TMPL_if !p.__first__>, </TMPL_if><TMPL_var MACROMAPPER(p.type, p.name)>
  <-/TMPL_foreach>) \
  if (<TMPL_call "scope" args(namespace)>Logger::isInstance() \
      && <TMPL_call "scope" args(namespace)>Logger::instance()->filter(<TMPL_var e.id>)) { \
    <TMPL_call "scope" args(namespace)>Logger::instance()-><TMPL_var e.name>Impl( \
      <TMPL_foreach params as p><TMPL_if !p.__first__>,
        <-/TMPL_if><TMPL_var MACROMAPPER(p.type, p.name)>
      <-/TMPL_foreach>); \
  }
<-/TMPL_foreach>

////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Logging interface for reporting runtime events and metrics.
 *
 * The events are to be logged through the macros defined above.
 */
class Logger {
public:

// LIFECYCLE

  /**
   * @param impl - logger implementation
   * @param log_level - the minimum log level to allow pass through
   */
  Logger(btr::SharedPtr<btr::log::LoggerImpl> impl, int log_level);

  /**
   * Dtor.
   */
  ~Logger() = default;

// OPERATIONS

  /**
   * @return true if logger instance is set
   */
  static bool isInstance();

  /**
   * Initialize default instance if none already set.
   *
   * @param log_level - the log level to set on the instance
   * @return Logger::instance()
   */
  static btr::SharedPtr<Logger> init(int log_level);

  /**
   * @return global logger instance
   */
  static btr::SharedPtr<Logger> instance();

  /**
   * @param logger - the global logger instance to set
   * @return any previous logger instance
   */
  static btr::SharedPtr<Logger> instance(btr::SharedPtr<Logger> logger);

  /**
   * @return logger implementation
   */
  btr::SharedPtr<btr::log::LoggerImpl> impl();

  /**
   * @param impl - the logger implementation instance
   * @return any previous logger implementation instance
   */
  btr::SharedPtr<btr::log::LoggerImpl> impl(btr::SharedPtr<btr::log::LoggerImpl> impl);

  /**
   * @param errnum - the error number
   * @return error string corresponding to errnum
   */
  static const char* strerror(int errnum);

  /**
   * Set the log level of a given event ID.
   *
   * @param event_id
   * @param log_level
   * @return the previous level of the event or -1 when given event didn't exist
   */
  int level(int event_id, int log_level);

  /**
   * @param event_id - the event ID
   * @return true if event is allowed to pass through, false otherwise
   */
  bool filter(int event_id) const;

  //------------------------------------------------------------------------------------------------

  <TMPL_foreach events as e>
  <-TMPL_var COUNT(1)->
  int <TMPL_var e.name>Impl(
    <TMPL_foreach params as p->
    <-TMPL_if !(p.__first__)->,
    <TMPL_var PARAMMAPPER(p.type, p.name)->
    <-TMPL_else->
    <-TMPL_var PARAMMAPPER(p.type, p.name)->
    </TMPL_if->
    </TMPL_foreach->);

  </TMPL_foreach>
private:

// OPERATIONS

  /**
   * Common code for logging.
   *
   * @param cx - characters would be used by log message, which can be more than MAX_LOG_SIZE
   * @param level - log level
   * @param msg - log message
   */
  int log(int cx, int level, const char* msg);

// ATTRIBUTES

  static btr::SharedPtr<Logger> logger_;
  btr::SharedPtr<btr::log::LoggerImpl> logger_impl_;
  int levels_[<TMPL_var (COUNT() + 1)>];
};
<TMPL_foreach namespace as n>
} // namespace <TMPL_var n>
</TMPL_foreach>
#endif // _<TMPL_call "guard" args(namespace)>Logger_hpp_
