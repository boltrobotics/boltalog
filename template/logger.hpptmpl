// Copyright (C) 2019 Sergey Kapustin <kapucin@gmail.com>

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

/** @file */

////////////////////////////////////////////////////////////////////////////////////////////////////
// WARNING: The code is auto-generated. Any changes will be overwritten.
////////////////////////////////////////////////////////////////////////////////////////////////////

<-TMPL_verbose>
<TMPL_block "guard" args(ns)>
<TMPL_foreach ns as n>
<TMPL_var n>_
</TMPL_foreach>
</TMPL_block>
</TMPL_verbose>

<-TMPL_verbose>
<TMPL_block "scope" args(ns)>
<TMPL_foreach ns as n>
<TMPL_var n>::
</TMPL_foreach>
</TMPL_block>
</TMPL_verbose>

#ifndef _<TMPL_call "guard" args(namespace)>Logger_hpp_
#define _<TMPL_call "guard" args(namespace)>Logger_hpp_

// PROJECT INCLUDES
#include "boltalog/defines.hpp"

#if BTR_X86 > 0

#include <memory>

namespace spdlog
{
class logger;
}

#elif BTR_ARD > 0

class HardwareSerial;

#elif BTR_AVR > 0

namespace btr
{
class Usart;
}

#elif BTR_STM32 > 0

namespace btr
{
class Usb;
class Usart;
}

#endif // x86, avr, ard, stm32
<TMPL_foreach namespace as n>
namespace <TMPL_var n>
{

</TMPL_foreach->
<-TMPL_foreach events as e>
#if BTR_LOG_ENABLED > 0
<-TMPL_if DEFINED(e.doc)>
/**
 * <TMPL_var e.doc>.
 *
<-TMPL_else>
/**
<-/TMPL_if>
<-TMPL_foreach params as p>
 <TMPL_var FORMATDOC(p.name, p.type, p.doc)>
<-/TMPL_foreach>
 */
#define <TMPL_var e.name>(
  <-TMPL_foreach params as p->
  <TMPL_if !p.__first__>, </TMPL_if><TMPL_var MACROMAPPER(p.type, p.name, 1)>
  <-/TMPL_foreach>) \
  if (<TMPL_call "scope" args(namespace)>Logger::instance()->filter(<TMPL_var e.id>)) { \
    <TMPL_call "scope" args(namespace)>Logger::instance()-><TMPL_var e.name>Impl( \
      <TMPL_foreach params as p><TMPL_if !p.__first__>,
        <-/TMPL_if><TMPL_var MACROMAPPER(p.type, p.name, 1)>
      <-/TMPL_foreach>); \
  }
#else
#define <TMPL_var e.name>(
  <-TMPL_foreach params as p->
  <TMPL_if !p.__first__>, </TMPL_if><TMPL_var MACROMAPPER(p.type, p.name, 1)>
  <-/TMPL_foreach>) \
      <TMPL_foreach params as p><TMPL_var MACROMAPPER(p.type, p.name, 0)>; </TMPL_foreach>

#endif // BTR_LOG_ENABLED > 0
</TMPL_foreach>
////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Logging interface for reporting runtime events and metrics.
 *
 * The events are to be logged through the macros defined above.
 */
class Logger {
public:

// LIFECYCLE

  /**
   * Ctor.
   */
  Logger();

  /**
   * Dtor.
   */
  ~Logger() = default;

// OPERATIONS

#if BTR_X86 > 0

  /**
   * @param backend - new backend logger. Should be supplied first time when instance() is called
   * @return global logger instance
   */
  static Logger* instance(std::shared_ptr<spdlog::logger>* backend = nullptr);

#elif BTR_ARD > 0

  static Logger* instance(HardwareSerial* backend = nullptr);

#elif BTR_AVR > 0

  static Logger* instance(btr::Usart* backend = nullptr);

#elif BTR_STM32 > 0

#if BTR_LOG_PORT_USB > 0
  static Logger* instance(btr::Usb* backend = nullptr);
#elif BTR_LOG_PORT_USART > 0
  static Logger* instance(btr::Usart* backend = nullptr);
#else
  /**
   * No-op logger, added as simple fix for when no USB or USART loggers are specified.
   * @return no-op logger
   */
  static Logger* instance();
#endif // STM32 backend

#endif // BTR_X86 > 0 | BTR_ARD > 0 | BTR_AVR > 0 | BTR_STM32 > 0

  /**
   * Set the log level of a given event ID.
   *
   * @param event_id
   * @param log_level
   * @return the previous level of the event or -1 when given event didn't exist
   */
  int level(int event_id, int log_level);

  /**
   * @param event_id - the event ID
   * @return true if event is allowed to pass through, false otherwise
   */
  bool filter(int event_id) const;

  /**
   * @return one letter log level
   */
  int shortLogLevel(int level);

#if BTR_LOG_ENABLED > 0

  //------------------------------------------------------------------------------------------------

  <TMPL_foreach events as e>
  <-TMPL_var COUNT(1)->
  int <TMPL_var e.name>Impl(
    <TMPL_foreach params as p->
    <-TMPL_if !(p.__first__)->,
    <TMPL_var PARAMMAPPER(p.type, p.name)->
    <-TMPL_else->
    <-TMPL_var PARAMMAPPER(p.type, p.name)->
    </TMPL_if->
    </TMPL_foreach->);

  </TMPL_foreach>
private:

// OPERATIONS

  /**
   * Common code for logging.
   *
   * @param cx - characters would be used by log message, which can be more than MAX_LOG_SIZE
   * @param level - log level
   * @param msg - log message
   */
  int log(int cx, int level, const char* msg);

// ATTRIBUTES

  int levels_[<TMPL_var (COUNT() + 1)>];
#if BTR_X86 > 0
  std::shared_ptr<spdlog::logger> backend_;
#elif BTR_ARD > 0
  HardwareSerial* backend_;
#elif BTR_AVR > 0
  btr::Usart* backend_;
#elif BTR_STM32 > 0
#if BTR_LOG_PORT_USB > 0
  btr::Usb* backend_;
#elif BTR_LOG_PORT_USART > 0
  btr::Usart* backend_;
#endif // BTR_LOG_PORT_*
#endif // BTR_X86, BTR_ARD, BTR_AVR, BTR_STM32

#endif // BTR_LOG_ENABLED > 0
};
<TMPL_foreach namespace as n>
} // namespace <TMPL_var n>
</TMPL_foreach>
#endif // _<TMPL_call "guard" args(namespace)>Logger_hpp_
