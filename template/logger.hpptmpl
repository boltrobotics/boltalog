// Copyright (C) 2019 Bolt Robotics <info@boltrobotics.com>
// License: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

////////////////////////////////////////////////////////////////////////////////////////////////////
// WARNING: The code is auto-generated. Any changes will be overwritten.
////////////////////////////////////////////////////////////////////////////////////////////////////

<-TMPL_verbose>
<TMPL_block "guard" args(ns)>
<TMPL_foreach ns as n>
<TMPL_var n>_
</TMPL_foreach>
</TMPL_block>
</TMPL_verbose>

<-TMPL_verbose>
<TMPL_block "scope" args(ns)>
<TMPL_foreach ns as n>
<TMPL_var n>::
</TMPL_foreach>
</TMPL_block>
</TMPL_verbose>

#ifndef _<TMPL_call "guard" args(namespace)>Logger_hpp_
#define _<TMPL_call "guard" args(namespace)>Logger_hpp_

#if defined(x86)
#include <memory>

namespace spdlog
{
class logger;
}

#elif defined(avr)

class HardwareSerial;

#elif defined(stm32)

namespace btr
{
class Usb;
class Usart;
}

#endif // x86, avr, stm32

// SYSTEM INCLUDES
#define _STDC_FORMAT_MACROS
#include <inttypes.h>
<TMPL_foreach namespace as n>
namespace <TMPL_var n>
{
</TMPL_foreach->
<-TMPL_foreach events as e->
<-TMPL_if DEFINED(e.doc)>

/**
 * <TMPL_var e.doc>
 *
<-TMPL_else>
/**
<-/TMPL_if>
<-TMPL_foreach params as p>
 * @param <TMPL_var p.name> <TMPL_var p.doc>
<-/TMPL_foreach>
 */
#define <TMPL_var e.name>(
  <-TMPL_foreach params as p->
  <TMPL_if !p.__first__>, </TMPL_if><TMPL_var MACROMAPPER(p.type, p.name)>
  <-/TMPL_foreach>) \
  if (<TMPL_call "scope" args(namespace)>Logger::instance()->filter(<TMPL_var e.id>)) { \
    <TMPL_call "scope" args(namespace)>Logger::instance()-><TMPL_var e.name>Impl( \
      <TMPL_foreach params as p><TMPL_if !p.__first__>,
        <-/TMPL_if><TMPL_var MACROMAPPER(p.type, p.name)>
      <-/TMPL_foreach>); \
  }
</TMPL_foreach>
////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Logging interface for reporting runtime events and metrics.
 *
 * The events are to be logged through the macros defined above.
 */
class Logger {
public:

// LIFECYCLE

  /**
   * Ctor.
   */
  Logger();

  /**
   * Dtor.
   */
  ~Logger() = default;

// OPERATIONS

  /**
   * @param backend - new backend logger. Should be supplied first time when instance() is called
   * @return global logger instance
   */
#if defined(x86)
  static Logger* instance(std::shared_ptr<spdlog::logger>* backend = nullptr);
#elif defined(avr)
  static Logger* instance(HardwareSerial* backend = nullptr);
#elif defined(BTR_STM32_LOGGER_USB)
  static Logger* instance(btr::Usb* backend = nullptr);
#elif defined(BTR_STM32_LOGGER_USART)
  static Logger* instance(btr::Usart* backend = nullptr);
#endif

  /**
   * @return text description of the error
   */
  static const char* strerror(int errnum);

  /**
   * Set the log level of a given event ID.
   *
   * @param event_id
   * @param log_level
   * @return the previous level of the event or -1 when given event didn't exist
   */
  int level(int event_id, int log_level);

  /**
   * @param event_id - the event ID
   * @return true if event is allowed to pass through, false otherwise
   */
  bool filter(int event_id) const;

  //------------------------------------------------------------------------------------------------

  <TMPL_foreach events as e>
  <-TMPL_var COUNT(1)->
  int <TMPL_var e.name>Impl(
    <TMPL_foreach params as p->
    <-TMPL_if !(p.__first__)->,
    <TMPL_var PARAMMAPPER(p.type, p.name)->
    <-TMPL_else->
    <-TMPL_var PARAMMAPPER(p.type, p.name)->
    </TMPL_if->
    </TMPL_foreach->);

  </TMPL_foreach>
private:

// OPERATIONS

  /**
   * Common code for logging.
   *
   * @param cx - characters would be used by log message, which can be more than MAX_LOG_SIZE
   * @param level - log level
   * @param msg - log message
   */
  int log(int cx, int level, const char* msg);

// ATTRIBUTES

  int levels_[<TMPL_var (COUNT() + 1)>];
#if defined(x86)
  std::shared_ptr<spdlog::logger> backend_;
#elif defined(avr)
  HardwareSerial* backend_;
#elif defined(stm32)
#if defined(BTR_STM32_LOGGER_USB)
  btr::Usb* backend_;
#elif defined(BTR_STM32_LOGGER_USART)
  btr::Usart* backend_;
#endif // stm32
#endif // x86, avr, stm32
};
<TMPL_foreach namespace as n>
} // namespace <TMPL_var n>
</TMPL_foreach>
#endif // _<TMPL_call "guard" args(namespace)>Logger_hpp_
